from aiogram import Router, F
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
)
import json

from config import RECIPES_PATH

router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
def load_recipes():
    with open(RECIPES_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_categories():
    data = load_recipes()
    return sorted(set(d['category'] for d in data))

# üìÇ –ö–Ω–æ–ø–∫–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" ‚Üí reply-–∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message):
    categories = get_categories()
    kb = [[KeyboardButton(text=cat)] for cat in categories]
    kb.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üçΩ", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–µ 5) —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
@router.message(lambda msg: msg.text in get_categories())
async def show_category_dishes(message: Message):
    category = message.text
    data = load_recipes()
    dishes = [d for d in data if d['category'] == category]
    limited = dishes[:5]

    buttons = [
        [InlineKeyboardButton(text=d["title"], callback_data=f"dish_{d['title']}")]
        for d in limited
    ]
    if len(dishes) > 5:
        buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"more_{category}_5")])

    await message.answer(
        f"ü•ó –ë–ª—é–¥–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{category}</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Ä—Ü–∏—è –±–ª—é–¥
@router.callback_query(F.data.startswith("more_"))
async def show_more_dishes(callback: CallbackQuery):
    parts = callback.data.split("_")
    category = parts[1]
    offset = int(parts[2])

    data = load_recipes()
    dishes = [d for d in data if d['category'] == category]
    next_dishes = dishes[offset:offset+5]

    buttons = [
        [InlineKeyboardButton(text=d["title"], callback_data=f"dish_{d['title']}")]
        for d in next_dishes
    ]

    new_offset = offset + 5
    if new_offset < len(dishes):
        buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"more_{category}_{new_offset}")])
    else:
        buttons.append([InlineKeyboardButton(text="üîÑ –°–Ω–∞—á–∞–ª–∞", callback_data=f"more_{category}_0")])

    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±–ª—é–¥–æ ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
@router.callback_query(F.data.startswith("dish_"))
async def show_dish_card(callback: CallbackQuery):
    dish_title = callback.data[5:]
    data = load_recipes()
    dish = next((d for d in data if d["title"] == dish_title), None)

    if not dish:
        await callback.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî", show_alert=True)
        return

    text = (
        f"üçΩ <b>{dish['title']}</b>\n\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {dish['category']}\n"
        f"üîó <a href='{dish['link']}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ü–µ–ø—Ç—É</a>"
    )

    await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
def register_category_handlers(dp):
    dp.include_router(router)
